// Generated by CoffeeScript 1.8.0
(function() {
  var express, path;

  path = require('path');

  express = require('express');

  module.exports = function(app, config, passport) {
    var bodyParser, session, swig;
    app.use(require('compression')());
    swig = require('swig');
    app.engine('html', swig.renderFile);
    app.set('view engine', 'html');
    app.use(require('serve-favicon')(path.join(config.app.root, 'public', 'favicon.ico')));
    if ('development' === app.get('env')) {
      app.use(express["static"](path.join(config.app.root, '.tmp', 'public')));
      app.use(express["static"](path.join(config.app.root, 'public')));
      app.use(require('morgan')('short'));
      app.set('views', path.join(config.app.root, 'views'));
      app.set('view cache', false);
      swig.setDefaults({
        cache: false
      });
    }
    if ('test' === app.get('env')) {
      app.set('views', path.join(config.app.root, 'views'));
    }
    if ('production' === app.get('env')) {
      app.use(express["static"](path.join(config.app.root, 'dist', 'public'), {
        maxAge: 365 * 24 * 3600
      }));
      app.enable('view cache');
      app.set('views', path.join(config.app.root, 'dist', 'views'));
    }
    bodyParser = require('body-parser');
    app.use(bodyParser.urlencoded({
      extended: true
    }));
    app.use(bodyParser.json({
      type: 'json'
    }));
    app.use(require('method-override')());
    app.use(require('express-validator')());
    app.use(require('cookie-parser')(config.app.secret));
    session = require('express-session');
    app.use(session({
      name: 'session.id',
      secret: config.app.secret,
      cookie: {
        path: '/',
        httpOnly: true,
        maxAge: 1000 * 60 * 60 * 24 * 30 * 12
      },
      store: new (require('connect-redis')(session))({
        host: config.db.redis.host,
        prefix: 'session:'
      }),
      resave: true,
      saveUninitialized: true
    }));
    if ('test' !== app.get('env')) {
      app.use(require('csurf')());
    }
    app.use(passport.initialize());
    app.use(passport.session());
    return app.use(function(req, res, done) {
      var cfgString;
      if ('test' !== app.get('env')) {
        res.cookie('_csrf', req.csrfToken());
      }
      cfgString = JSON.stringify({
        config: {
          title: config.app.title,
          description: config.app.description
        }
      });
      res.locals.app = config.app;
      res.locals.user = req.user;
      res.locals.configScript = "<script>var adou = " + cfgString + ";</script>";
      return done();
    });
  };

}).call(this);
